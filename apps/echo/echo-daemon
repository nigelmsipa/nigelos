#!/usr/bin/env python3
"""
Echo - Silent Background Daemon Controller
Simple command-line tool to start/stop Echo daemon silently
"""

import subprocess
import sys
import os
import signal
import time
from pathlib import Path

class EchoController:
    def __init__(self):
        self.daemon_script = Path(__file__).parent / "echo_daemon_final.py"
        self.pid_file = Path.home() / ".cache" / "echo_daemon.pid"
        self.pid_file.parent.mkdir(exist_ok=True)
    
    def _notify(self, title, message, icon="dialog-information"):
        """Send desktop notification"""
        try:
            subprocess.run(['notify-send', '-i', icon, title, message], 
                         stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        except:
            pass
    
    def is_running(self):
        """Check if daemon is already running"""
        if not self.pid_file.exists():
            return False
        
        try:
            with open(self.pid_file, 'r') as f:
                pid = int(f.read().strip())
            
            # Check if process exists
            os.kill(pid, 0)
            return True
        except (OSError, ValueError):
            # Process doesn't exist, clean up stale PID file
            self.pid_file.unlink(missing_ok=True)
            return False
    
    def start(self):
        """Start the Echo daemon in background"""
        if self.is_running():
            self._notify("Echo Already Running", "üé§ Echo daemon is already active", "dialog-information")
            return
        
        try:
            # Start daemon in background with no output
            process = subprocess.Popen([
                sys.executable, str(self.daemon_script)
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, 
               start_new_session=True)
            
            # Save PID
            with open(self.pid_file, 'w') as f:
                f.write(str(process.pid))
            
            # Give it a moment to start
            time.sleep(0.5)
            
            # Verify it's still running
            if process.poll() is None:
                self._notify("Echo Started", "üé§ Speech-to-text daemon is now active\nPress RIGHT CTRL to record", "audio-input-microphone")
            else:
                self._notify("Echo Failed", "‚ùå Failed to start daemon", "dialog-error")
                self.pid_file.unlink(missing_ok=True)
                
        except Exception as e:
            self._notify("Echo Error", f"‚ùå Error starting daemon: {e}", "dialog-error")
    
    def stop(self):
        """Stop the Echo daemon"""
        if not self.is_running():
            self._notify("Echo Not Running", "üîá Echo daemon is not active", "dialog-information")
            return
        
        try:
            with open(self.pid_file, 'r') as f:
                pid = int(f.read().strip())
            
            # Send SIGTERM to gracefully stop
            os.kill(pid, signal.SIGTERM)
            
            # Wait a bit for graceful shutdown
            time.sleep(0.5)
            
            # If still running, force kill
            try:
                os.kill(pid, signal.SIGKILL)
            except OSError:
                pass  # Process already gone
            
            # Clean up PID file
            self.pid_file.unlink(missing_ok=True)
            
            self._notify("Echo Stopped", "üîá Speech-to-text daemon stopped", "audio-input-microphone")
            
        except Exception as e:
            self._notify("Echo Error", f"‚ùå Error stopping daemon: {e}", "dialog-error")
    
    def status(self):
        """Show daemon status"""
        if self.is_running():
            self._notify("Echo Status", "üé§ Echo daemon is running\nPress RIGHT CTRL to record", "audio-input-microphone")
        else:
            self._notify("Echo Status", "üîá Echo daemon is not running", "dialog-information")
    
    def toggle(self):
        """Toggle daemon on/off"""
        if self.is_running():
            self.stop()
        else:
            self.start()

def main():
    controller = EchoController()
    
    if len(sys.argv) < 2:
        # No arguments - toggle daemon
        controller.toggle()
        return
    
    command = sys.argv[1].lower()
    
    if command in ['start', 'on']:
        controller.start()
    elif command in ['stop', 'off']:
        controller.stop()
    elif command in ['status', 'check']:
        controller.status()
    elif command in ['toggle', 'switch']:
        controller.toggle()
    elif command in ['restart']:
        controller.stop()
        time.sleep(1)
        controller.start()
    else:
        print("Usage: echo [start|stop|status|toggle|restart]")
        print("  start   - Start Echo daemon")
        print("  stop    - Stop Echo daemon")
        print("  status  - Check daemon status")
        print("  toggle  - Toggle daemon on/off (default)")
        print("  restart - Restart daemon")

if __name__ == "__main__":
    main()
